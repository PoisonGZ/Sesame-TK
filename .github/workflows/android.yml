name: Android CI (无签名)

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set Timezone to Asia/Shanghai
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "Current time: $(date)"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-version: wrapper

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleNormalRelease assembleCompatibleRelease -Pversion=${{ github.ref_name }}

      # 直接定位未签名 APK
      - name: Locate APKs and Set Outputs
        id: locate_apks
        run: |
          normal_apk=$(find app/build/outputs/apk/normal/release -name "*.apk" | head -n 1)
          compatible_apk=$(find app/build/outputs/apk/compatible/release -name "*.apk" | head -n 1)
          echo "normal_apk=$normal_apk" >> $GITHUB_OUTPUT
          echo "compatible_apk=$compatible_apk" >> $GITHUB_OUTPUT

      # 上传到 Actions Artifacts（供调试）
      - name: Upload APK - Compatible
        uses: actions/upload-artifact@v4
        with:
          name: apk-compatible-unsigned
          path: ${{ steps.locate_apks.outputs.compatible_apk }}

      - name: Upload APK - Normal
        uses: actions/upload-artifact@v4
        with:
          name: apk-normal-unsigned
          path: ${{ steps.locate_apks.outputs.normal_apk }}

      # 提取文件名、版本号
      - name: Extract file names
        id: extract_info
        run: |
          normal_file=$(basename "${{ steps.locate_apks.outputs.normal_apk }}")
          compatible_file=$(basename "${{ steps.locate_apks.outputs.compatible_apk }}")
          version=$(echo "$normal_file" | sed -E 's/.*-(Normal|Compatible)-(.*)\.apk/\2/')
          echo "normal_file=$normal_file" >> $GITHUB_OUTPUT
          echo "compatible_file=$compatible_file" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      # 生成 checksum（可选）
      - name: Generate APK Checksum
        run: |
          sha256sum ${{ steps.locate_apks.outputs.normal_apk }}     > CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}-unsigned.apk.sha256
          sha256sum ${{ steps.locate_apks.outputs.compatible_apk }} > CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}-unsigned.apk.sha256

      # 示例：直接上传未签名 APK 到 Release
      - name: Upload Assets to Source Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.release.tag_name || steps.extract_info.outputs.version }}
          files: |
            ${{ steps.locate_apks.outputs.normal_apk }}
            ${{ steps.locate_apks.outputs.compatible_apk }}
            CHECKSUMS-Sesame-*-unsigned.apk.sha256
          tag_name: ${{ steps.extract_info.outputs.version }}
          draft: false
          generate_release_notes: true
          body: |
            ## ⚠️ 未签名 APK，仅供测试
            如需安装，请手动签名或使用调试环境。

      # 示例：通过 Telegram 发送未签名 APK
      - name: Send Normal APK (unsigned)
        if: secrets.TG_BOT_TOKEN
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          document: ${{ steps.locate_apks.outputs.normal_apk }}

      - name: Send Compatible APK (unsigned)
        if: secrets.TG_BOT_TOKEN
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          document: ${{ steps.locate_apks.outputs.compatible_apk }}
